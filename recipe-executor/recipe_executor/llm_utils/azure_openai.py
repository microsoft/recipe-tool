# This file was generated by Codebase-Generator, do not edit directly
"""
Azure OpenAI Integration

Provides get_azure_openai_model to create a PydanticAI OpenAIModel
using Azure OpenAI (API key or Azure Identity).
"""

import os
import logging
from typing import Optional

from openai import AsyncAzureOpenAI

from pydantic_ai.providers.openai import OpenAIProvider
from pydantic_ai.models.openai import OpenAIModel

# Azure Identity imports
from azure.identity import DefaultAzureCredential, ManagedIdentityCredential, get_bearer_token_provider

# Scope for Azure AD token provider
_AZURE_TOKEN_SCOPE = "https://cognitiveservices.azure.com/.default"


def _mask_key(key: str) -> str:
    """
    Mask an API key for logging, showing only first and last character.
    """
    if not key:
        return ""
    if len(key) <= 2:
        return "*" * len(key)
    return key[0] + "*" * (len(key) - 2) + key[-1]


def get_azure_openai_model(
    logger: logging.Logger,
    model_name: str,
    deployment_name: Optional[str] = None,
) -> OpenAIModel:
    """
    Create a PydanticAI OpenAIModel for Azure OpenAI, using environment variables.

    Args:
        logger (logging.Logger): Logger for logging messages.
        model_name (str): The model name to use in calls (e.g., "gpt-4o").
        deployment_name (Optional[str]): Azure deployment name; defaults to env or model_name.

    Raises:
        Exception: If required environment variables are missing or client fails.
    """
    try:
        # Load configuration from environment
        azure_endpoint = os.getenv("AZURE_OPENAI_BASE_URL")
        if not azure_endpoint:
            raise ValueError("Environment variable AZURE_OPENAI_BASE_URL is required")

        azure_api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2025-03-01-preview")
        env_deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")
        azure_deployment = deployment_name or env_deployment or model_name

        use_managed_identity = os.getenv("AZURE_USE_MANAGED_IDENTITY", "false").lower() in ("1", "true", "yes")
        azure_api_key = os.getenv("AZURE_OPENAI_API_KEY")
        client_id = os.getenv("AZURE_CLIENT_ID")

        # Log configuration (mask secrets)
        masked_key = _mask_key(azure_api_key) if azure_api_key else None
        logger.debug(
            "Azure OpenAI config: base_url=%s, api_version=%s, "
            "deployment=%s, use_managed_identity=%s, api_key=%s, client_id=%s",
            azure_endpoint,
            azure_api_version,
            azure_deployment,
            use_managed_identity,
            masked_key,
            client_id,
        )

        # Initialize AsyncAzureOpenAI client
        if use_managed_identity:
            # Azure Identity authentication
            if client_id:
                credential = ManagedIdentityCredential(client_id=client_id)
            else:
                credential = DefaultAzureCredential()
            token_provider = get_bearer_token_provider(credential, _AZURE_TOKEN_SCOPE)
            azure_client = AsyncAzureOpenAI(
                azure_ad_token_provider=token_provider,
                azure_endpoint=azure_endpoint,
                api_version=azure_api_version,
                azure_deployment=azure_deployment,
            )
            auth_method = "Azure Identity"
        else:
            # API key authentication
            if not azure_api_key:
                raise ValueError("Environment variable AZURE_OPENAI_API_KEY is required for API key authentication")
            azure_client = AsyncAzureOpenAI(
                api_key=azure_api_key,
                azure_endpoint=azure_endpoint,
                api_version=azure_api_version,
                azure_deployment=azure_deployment,
            )
            auth_method = "API Key"

        # Wrap in PydanticAI provider and model
        provider = OpenAIProvider(openai_client=azure_client)
        model = OpenAIModel(model_name, provider=provider)

        logger.info(
            "Created Azure OpenAI model '%s' using %s authentication",
            model_name,
            auth_method,
        )
        return model

    except Exception:
        logger.debug("Failed to create Azure OpenAI model '%s'", model_name, exc_info=True)
        raise
