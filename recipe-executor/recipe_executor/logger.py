# This file was generated by Codebase-Generator, do not edit directly
"""
Logger component for Recipe Executor.
Initializes and configures logging to stdout and log files.
"""

import logging
import os
import sys


def init_logger(log_dir: str = "logs", stdio_log_level: str = "INFO") -> logging.Logger:
    """
    Initializes a logger that writes to stdout and to log files (debug/info/error).
    Clears existing logs on each run.

    Args:
        log_dir (str): Directory to store log files. Default is "logs".
        stdio_log_level (str): Log level for stdout. Default is "INFO".
            Options: "DEBUG", "INFO", "WARN", "ERROR".
            Not case-sensitive. "WARN" is accepted as "WARNING".

    Returns:
        logging.Logger: Configured logger instance.

    Raises:
        Exception: If log directory cannot be created or log files cannot be opened.
    """
    # Normalize stdio log level
    level_name = stdio_log_level.upper() if stdio_log_level else "INFO"
    if level_name == "WARN":
        console_level = logging.WARNING
    else:
        console_level = getattr(logging, level_name, None)
    if console_level is None or not isinstance(console_level, int):
        raise ValueError(f"Invalid stdio_log_level: {stdio_log_level}")

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    # Remove any existing handlers
    if logger.hasHandlers():
        logger.handlers.clear()

    # Create log directory
    try:
        os.makedirs(log_dir, exist_ok=True)
    except Exception as e:
        raise Exception(f"Failed to create log directory '{log_dir}': {e}")

    # Formatter for all handlers
    fmt = "%(asctime)s.%(msecs)03d [%(levelname)s] (%(filename)s:%(lineno)d) %(message)s"
    date_fmt = "%Y-%m-%d %H:%M:%S"
    formatter = logging.Formatter(fmt=fmt, datefmt=date_fmt)

    # File handlers
    try:
        debug_path = os.path.join(log_dir, "debug.log")
        debug_handler = logging.FileHandler(debug_path, mode="w")
        debug_handler.setLevel(logging.DEBUG)
        debug_handler.setFormatter(formatter)
        logger.addHandler(debug_handler)

        info_path = os.path.join(log_dir, "info.log")
        info_handler = logging.FileHandler(info_path, mode="w")
        info_handler.setLevel(logging.INFO)
        info_handler.setFormatter(formatter)
        logger.addHandler(info_handler)

        error_path = os.path.join(log_dir, "error.log")
        error_handler = logging.FileHandler(error_path, mode="w")
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        logger.addHandler(error_handler)
    except Exception as e:
        raise Exception(f"Failed to open log files in '{log_dir}': {e}")

    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(console_level)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # Log initialization messages
    logger.debug("Logger initialized with directory '%s' and console level %s", log_dir, level_name)
    logger.info("Logger initialized successfully")

    return logger
