# This file was generated by Codebase-Generator, do not edit directly

import logging
from typing import Generic, TypeVar

from pydantic import BaseModel

from recipe_executor.protocols import ContextProtocol


class StepConfig(BaseModel):
    """
    Base configuration model for steps. Subclass this for step-specific configuration.
    """

    pass


StepConfigType = TypeVar("StepConfigType", bound=StepConfig)


class BaseStep(Generic[StepConfigType]):
    """
    Base class for all steps, providing structure and enforcing the execution interface.

    Subclasses must implement the async execute method.
    """

    def __init__(self, logger: logging.Logger, config: StepConfigType) -> None:
        """
        Initialize the step with a logger and validated configuration.

        Args:
            logger (logging.Logger): Logger instance for the step.
            config (StepConfigType): Validated configuration for the step.
        """
        self.logger: logging.Logger = logger
        self.config: StepConfigType = config
        self.logger.debug(f"Initialized {self.__class__.__name__} with config: {self.config}")

    async def execute(self, context: ContextProtocol) -> None:
        """
        Execute the step logic.

        Must be implemented by subclasses.

        Args:
            context (ContextProtocol): Execution context for sharing data between steps.
        """
        raise NotImplementedError(f"{self.__class__.__name__}.execute must be implemented by subclasses")
