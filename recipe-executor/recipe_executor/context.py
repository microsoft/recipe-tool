# This file was generated by Codebase-Generator, do not edit directly
"""
Context component for the Recipe Executor system.
Provides a shared, mutable state container (artifacts) and configuration storage.
"""

import copy
import json
from typing import Any, Dict, Iterator, Optional

from recipe_executor.protocols import ContextProtocol


class Context(ContextProtocol):
    """Shared state (artifacts) and configuration container."""

    def __init__(
        self,
        artifacts: Optional[Dict[str, Any]] = None,
        config: Optional[Dict[str, Any]] = None,
    ) -> None:
        # Deep copy inputs to avoid side effects
        self._artifacts: Dict[str, Any] = copy.deepcopy(artifacts) if artifacts else {}
        self._config: Dict[str, Any] = copy.deepcopy(config) if config else {}

    def __getitem__(self, key: str) -> Any:
        if key in self._artifacts:
            return self._artifacts[key]
        raise KeyError(f"Key '{key}' not found in Context.")

    def __setitem__(self, key: str, value: Any) -> None:
        self._artifacts[key] = value

    def __delitem__(self, key: str) -> None:
        # Let underlying dict raise KeyError if missing
        del self._artifacts[key]

    def __contains__(self, key: str) -> bool:
        return key in self._artifacts

    def __iter__(self) -> Iterator[str]:
        # Snapshot keys to avoid concurrent modification issues
        return iter(list(self._artifacts.keys()))

    def __len__(self) -> int:
        return len(self._artifacts)

    def keys(self) -> Iterator[str]:
        """Iterator over artifact keys."""
        return iter(list(self._artifacts.keys()))

    def get(self, key: str, default: Any = None) -> Any:
        """Return the value for key if present, else default."""
        return self._artifacts.get(key, default)

    def clone(self) -> ContextProtocol:
        """Deep copy of context (artifacts and config) for isolated use."""
        new_artifacts = copy.deepcopy(self._artifacts)
        new_config = copy.deepcopy(self._config)
        return Context(artifacts=new_artifacts, config=new_config)

    def dict(self) -> Dict[str, Any]:
        """Deep copy of artifacts as a standard dict."""
        return copy.deepcopy(self._artifacts)

    def json(self) -> str:
        """JSON string representation of artifacts."""
        return json.dumps(self._artifacts)

    def get_config(self) -> Dict[str, Any]:
        """Return the configuration dict."""
        return self._config

    def set_config(self, config: Dict[str, Any]) -> None:
        """Replace the configuration with a deep copy of the provided dict."""
        self._config = copy.deepcopy(config)
