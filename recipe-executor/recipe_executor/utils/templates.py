# This file was generated by Codebase-Generator, do not edit directly
import re
from typing import Any

from liquid import Environment
from liquid.exceptions import LiquidError
from recipe_executor.protocols import ContextProtocol

# Initialize a reusable Liquid environment with extra filters enabled
_env = Environment(extra=True)

# Custom filter: snakecase


def _snakecase(value: Any) -> str:
    """
    Convert the input value to snake_case string.
    """
    s = str(value)
    # Replace non-word characters with underscore
    s = re.sub(r"[^\w]+", "_", s)
    # Collapse multiple underscores
    s = re.sub(r"_+", "_", s)
    return s.strip("_").lower()


_env.filters["snakecase"] = _snakecase


def render_template(text: str, context: ContextProtocol) -> str:
    """
    Render the given text as a Python Liquid template using the provided context.

    Args:
        text (str): The template text to render.
        context (ContextProtocol): The context providing values for rendering the template.

    Returns:
        str: The rendered text.

    Raises:
        ValueError: If there is an error during template rendering.
    """
    try:
        template = _env.from_string(text)
        rendered = template.render(**context.dict())
        return rendered
    except LiquidError as e:
        # Liquid-specific errors
        raise ValueError(
            f"Liquid error while rendering template: {e}. Template: {text!r}, Context: {context.dict()}"
        ) from e
    except Exception as e:
        # Generic errors
        raise ValueError(f"Error while rendering template: {e}. Template: {text!r}, Context: {context.dict()}") from e
