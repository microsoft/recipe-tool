#!/usr/bin/env python3
"""
Build script for Document Generator V2 deployment.

This script prepares the document generator v2 app for deployment by:
1. Bundling recipe files from the main recipes directory
2. Creating a self-contained deployment package

Usage:
    python scripts/build_deployment.py
    make build
"""

import shutil
import sys
from pathlib import Path

# Add the parent directory to path for importing modules
sys.path.insert(0, str(Path(__file__).parent.parent))


def get_repo_root() -> Path:
    """Get the repository root directory."""
    current = Path(__file__).resolve()
    while current.parent != current:
        if (current / ".git").exists():
            return current
        # Also check for specific repo markers
        if (current / "recipes").exists() and (current / "apps").exists():
            return current
        current = current.parent
    raise RuntimeError("Could not find repository root")


def bundle_recipes(app_dir: Path, repo_root: Path) -> None:
    """Bundle recipe files into the app package."""
    print("📦 Bundling recipe files...")

    # Source and destination paths
    recipes_source = repo_root / "recipes" / "document_generator"
    recipes_dest = app_dir / "document_generator_v2_app" / "recipes"

    # Clean destination directory
    if recipes_dest.exists():
        shutil.rmtree(recipes_dest)

    # Copy recipe files
    recipes_dest.mkdir(parents=True, exist_ok=True)

    # Copy main recipe file
    main_recipe = recipes_source / "document_generator_recipe.json"
    if main_recipe.exists():
        shutil.copy2(main_recipe, recipes_dest / "document_generator_recipe.json")
        print(f"    Copied: {main_recipe.name}")
    else:
        print(f"    Warning: Main recipe not found at {main_recipe}")

    docpack_recipe = recipes_source / "generate_docpack.json"
    if docpack_recipe.exists():
        shutil.copy2(docpack_recipe, recipes_dest / "generate_docpack.json")
        print(f"    Copied: {docpack_recipe.name}")
    else:
        print(f"    Warning: Main recipe not found at {docpack_recipe}")

    # Copy recipes subdirectory
    recipes_subdir_source = recipes_source / "recipes"
    recipes_subdir_dest = recipes_dest / "recipes"

    if recipes_subdir_source.exists():
        shutil.copytree(recipes_subdir_source, recipes_subdir_dest)
        recipe_files = list(recipes_subdir_dest.glob("*.json"))
        print(f"    Copied {len(recipe_files)} recipe files:")
        for recipe_file in sorted(recipe_files):
            print(f"      - {recipe_file.name}")
    else:
        print(f"    Warning: Recipes subdirectory not found at {recipes_subdir_source}")

    print(f"    ✓ Recipes bundled to: {recipes_dest}")


def create_gitignore_entry(app_dir: Path) -> None:
    """Add bundled recipes to .gitignore."""
    gitignore_path = app_dir / ".gitignore"
    recipes_entry = "document_generator_v2_app/recipes/"

    # Create .gitignore if it doesn't exist
    if not gitignore_path.exists():
        gitignore_path.write_text("")

    # Read existing .gitignore
    existing_content = gitignore_path.read_text()

    # Add recipes entry if not present
    if recipes_entry not in existing_content:
        if existing_content and not existing_content.endswith("\n"):
            existing_content += "\n"

        existing_content += "\n# Bundled recipes (generated by build script)\n"
        existing_content += recipes_entry + "\n"

        gitignore_path.write_text(existing_content)
        print("    ✓ Added recipes to .gitignore")


def verify_build(app_dir: Path) -> bool:
    """Verify that the build completed successfully."""
    print("🔍 Verifying build...")

    errors = []

    # Check recipes directory
    recipes_dir = app_dir / "document_generator_v2_app" / "recipes"
    if not recipes_dir.exists():
        errors.append("Recipes directory not found")
    else:
        main_recipe = recipes_dir / "document_generator_recipe.json"
        if not main_recipe.exists():
            errors.append("Main recipe file not found")

        recipes_subdir = recipes_dir / "recipes"
        if not recipes_subdir.exists():
            errors.append("Recipes subdirectory not found")
        else:
            recipe_files = list(recipes_subdir.glob("*.json"))
            if len(recipe_files) < 7:  # Expected number of sub-recipes
                errors.append(f"Expected 7+ recipe files, found {len(recipe_files)}")

    if errors:
        print("    ✗ Build verification failed:")
        for error in errors:
            print(f"      - {error}")
        return False
    else:
        print("    ✓ Build verification passed")
        return True


def main():
    """Main build script execution."""
    print("🚀 Building Document Generator V2 deployment package...\n")

    try:
        # Get paths
        app_dir = Path(__file__).parent.parent
        repo_root = get_repo_root()

        print(f"App directory: {app_dir}")
        print(f"Repository root: {repo_root}\n")

        # Bundle recipes
        bundle_recipes(app_dir, repo_root)
        print()

        # Update .gitignore
        create_gitignore_entry(app_dir)
        print()

        # Verify build
        success = verify_build(app_dir)
        print()

        if success:
            print("✅ Build completed successfully!")
            print(f"📁 Deployment package ready in: {app_dir}")
            print("\nThe app is now self-contained and ready for deployment.")
            print("All recipe files are bundled within the app directory.")
        else:
            print("❌ Build failed! See errors above.")
            sys.exit(1)

    except Exception as e:
        print(f"❌ Build failed with error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
